## --- BEGIN LICENSE BLOCK ---
# Copyright (c) 2017-present WeWantToKnow AS
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
## --- END LICENSE BLOCK ---

# This Rakefile is primarily used by the developers for automation purposes
#
# Please refrain from expanding this file unless really necessary

require 'fileutils'
require 'github_api'
require 'u3d'

UI = U3dCore::UI

task :chdir do
  file = File.symlink?(__FILE__) ? File.readlink(__FILE__) : __FILE__
  rakefile_dir = File.expand_path File.dirname file
  Dir.chdir(File.join(rakefile_dir, '..'))
end

task install_gems: [:chdir] do
  sh('bundle install')
end

desc 'Run the tests using u3d'
task test: [:chdir] do
  pwd = Dir.pwd
  sh "bundle exec u3d run -- -logFile u3d.log -runTests -projectPath #{pwd} -testResults #{pwd}/results.xml -testPlatform editmode -batchmode"
end

desc 'Build the Uplift DLL and the unitypackage contain the DLL and its dependencies'
task :build, [:unity_version] => [:chdir] do |_t, args|
  args.with_defaults(unity_version: '5.6.5f1')
  unity_version = args[:unity_version]
  FileUtils.mkdir_p('Build/ProjectSettings')
  File.write('ProjectSettings/ProjectVersion.txt', "m_EditorVersion: #{unity_version}")
  FileUtils.cp('ProjectSettings/ProjectVersion.txt', 'Build/ProjectSettings/ProjectVersion.txt')

  sh('bundle exec u3d -- -logFile u3d.log -batchmode -quit -executeMethod BuildTool.DllCompiler.BuildPackage')

  editor_dir = File.join('Assets', 'Plugins', 'Editor')
  # prepare a Unity package
  dirs = [editor_dir]
  uplift_package = File.absolute_path File.join('target', "Uplift_#{unity_version}.unitypackage")
  Dir.chdir('Build') do
    sh("bundle exec u3d -- -logFile u3d.log -batchmode -quit -exportPackage #{dirs.join(' ')} #{uplift_package}")
  end
  UI.success "File #{uplift_package} generated!"
end

# DEPLOYMENT

artifact_targets = ['5.6.5f1', '2017.1.2f1', '2017.2.1f1']
repository = 'uplift'
owner = 'Dragonbox'

desc 'Make sure the current branch is master, and no changes have been made'
task :ensure_git_clean do
  branch = run_command('git rev-parse --abbrev-ref HEAD', "Couldn't get current git branch").strip
  UI.user_error!("You are not on 'master' but on '#{branch}'") unless branch == 'master'
  output = run_command('git status --porcelain', "Couldn't get git status")
  UI.user_error!("git status not clean:\n#{output}") unless output == ''
end

task :prepare_git_pr, [:pr_branch] do |_t, args|
  pr_branch = args['pr_branch']
  raise 'Missing pr_branch argument' unless pr_branch
  UI.user_error! 'Prepare git PR stopped by user' unless UI.confirm("Creating PR branch #{pr_branch}")
  run_command("git checkout -b #{pr_branch}")
end

desc 'Bump the version number to the version entered interactively; pushes a commit to master'
task bump: %i[ensure_git_clean chdir] do
  nextversion = UI.input 'Next version will be:'
  UI.user_error! 'Bump version stopped by user' unless UI.confirm("Next version will be #{nextversion}. Confirm?")
  UI.user_error! "Version #{nextversion} is already the current one" unless UpliftCode.version != nextversion
  UpliftCode.version = nextversion
  GithubChangelogGenerator.future_release = nextversion
  sh 'git add .github_changelog_generator Assets/Plugins/Editor/Uplift/About.cs'
  sh "git commit -m \"Bump version to #{nextversion}\""
  sh 'git push'
end

desc 'Update the changelog, no commit made'
task :changelog do
  UI.message 'Updating changelog'
  sh "github_changelog_generator -t #{ENV['UPLIFT_GITHUB_TOKEN']}" if ENV['UPLIFT_GITHUB_TOKEN']
end

desc 'Prepare a release: check repo status, generate changelog, create PR'
task pre_release: %i[ensure_git_clean chdir] do
  nextversion = UpliftCode.version

  # check if not already prereleased
  output = run_command("git tag -l v#{nextversion}").strip
  UI.user_error! "Version '#{nextversion}' already released. Run 'rake bump'" unless output == ''

  gh_future_release = GithubChangelogGenerator.future_release
  UI.user_error! "GithubChangelogGenerator version #{gh_future_release} != #{nextversion}" unless gh_future_release == nextversion

  pr_branch = "release_#{nextversion}"
  Rake::Task['prepare_git_pr'].invoke(pr_branch)

  README.version = nextversion

  Rake::Task['changelog'].invoke

  UI.user_error! 'Pre release stopped by user.' unless UI.confirm("CHANGELOG PR for version #{nextversion}. Confirm?")

  msg = "Preparing release for #{nextversion}"
  sh 'git add CHANGELOG.md README.md'
  sh "git commit -m \"#{msg}\""
  sh "git push origin #{pr_branch}"

  github = MyGithub.github
  github.pull_requests.create owner, repository,
                              title: msg,
                              body: 'This is automatically generated to prepare for the new version',
                              head: pr_branch,
                              base: 'master'

  sh 'git checkout master'
  sh "git branch -D #{pr_branch}"
end

desc 'Release the new version and generate artifacts to attach to it'
task release: %i[ensure_git_clean chdir] do
  nextversion = UpliftCode.version

  tag_name = 'v' + nextversion

  artifact_targets.each do |target|
    puts "--- #{target} ---"
    Rake::Task['build'].invoke(target)
    Rake::Task['build'].reenable
  end

  release_notes = "# Release notes:\n"

  # Release notes loading:
  # - Read CHANGELOG.md
  # - Remove footer
  # - Split on release header to get release 'block'
  # - Get the first block, ie latest release ([1] and not [0] because of file header)
  File.open('CHANGELOG.md', 'r') do |changelog|
    release_notes += changelog
                     .read
                     .gsub(/\\\* \*This Change Log was automatically generated by.*\*/, '')
                     .split(/## \[.*\]\(.*\) \(.*\).*\n\s*\[Full Changelog\]\(.*\).*\n/)[1].chomp
  end

  github = MyGithub.github
  release = github.repos.releases.create owner, repository,
                                         tag_name: tag_name,
                                         target_commitish: 'master',
                                         name: "Version #{tag_name}",
                                         body: release_notes,
                                         draft: true,
                                         prelease: false

  Rake::Task['artifacts'].invoke(release['id'])
end

desc 'Add artifacts to the release'
task :artifacts, [:id] => [:chdir] do |_t, args|
  id = args['id']
  UI.user_error!('Release id is required to attach artifacts to it') unless id

  require 'net/http'
  Dir['target/*.unitypackage'].each do |artifact|
    UI.message "Uploading #{artifact}..."
    uri = URI.parse("https://uploads.github.com/repos/#{owner}/#{repository}/releases/#{id}/assets?name=#{File.basename(artifact)}")
    Net::HTTP.start(uri.host, uri.port, use_ssl: true) do |http|
      request = Net::HTTP::Post.new(
        uri.request_uri,
        initheader = {
          'Content-Type' => 'application/zip',
          'Authorization' => 'token ' + ENV['UPLIFT_GITHUB_TOKEN']
        }
      )
      File.open(artifact, 'rb') do |f|
        request.body = f.read
      end
      response = http.request request
      unless response.code.between?('200', '299')
        UI.error "Could not upload #{artifact} to #{uri}"
        UI.error "Response failed with code #{response.code}"
        UI.error response.body
      end
    end
    # FIXME
    # github.repos.releases.assets.upload owner, repository, release['id'],
    #                                     artifact,
    #                                     name: File.basename(artifact),
    #                                     content_type: 'application/octet-stream'
  end
end

class GithubChangelogGenerator
  PATH = '.github_changelog_generator'.freeze
  class << self
      def future_release
        s = File.read(PATH)
        s.split("\n").each do |line|
          m = line.match(/future-release=v(.*)/)
          return m[1] if m
        end
        raise "Couldn't find future-release in #{PATH}"
      end

      def future_release=(nextv)
        s = File.read(PATH)
        lines = s.split("\n").map do |line|
          m = line.match(/future-release=v(.*)/)
          if m
            "future-release=v#{nextv}"
          else
            line
          end
        end
        File.write(PATH, lines.join("\n") + "\n")
      end
  end
end

class README
  PATH = 'README.md'.freeze
  class << self
    def version=(version)
      s = File.read(PATH)
      lines = s.split("\n").map do |line|

        m = line.match(/\!\[Version\]\(https:\/\/img.shields.io\/badge\/version-.*.svg\)/)
        if m
          "![Version](https://img.shields.io/badge/version-#{version}-blue.svg)"
        else
          line
        end
      end
      File.write(PATH, lines.join("\n") + "\n")
    end
  end
end

class UpliftCode
  PATH = 'Assets/Plugins/Editor/Uplift/About.cs'.freeze
  class << self
      def version
        s = File.read(PATH)
        s.split("\n").each do |line|
          m = line.match(/public static readonly string Version = "(.*)"/)
          return m[1] if m
        end
        UI.user_error! 'Could not retrieve version from codebase'
      end

      def version=(version)
        s = File.read(PATH)
        lines = s.split("\n").map do |line|
          m = line.match(/(.*public static readonly string Version = ").*(".*)/)
          if m
            "#{m[1]}#{version}#{m[2]}"
          else
            line
          end
        end
        File.write(PATH, lines.join("\n") + "\n")
      end
  end
end

class MyGithub
  @github
  def self.github
    @github = Github.new oauth_token: ENV['UPLIFT_GITHUB_TOKEN'] unless @github
    @github
  end
end

def run_command(command, error_message = nil)
  output = `#{command}`
  unless $CHILD_STATUS.success?
    error_message = "Failed to run command '#{command}'" if error_message.nil?
    UI.user_error!(error_message)
  end
  output
end

task default: ['test']
